<?php

namespace App\lib;

use App\model\UserModel;
use TCPDF;

class ReportMaker
{


    private TCPDF $pdf;

    public static $UNPAID_HEADER = ["Name", "Unit", "Balance", "Due Month"];
    public static $PENDING_HEADER = ["Name", "Unit", "Amount", "Coverage"];

    public static $REJECTED_HEADER = ["ID","Name", "Unit", "Coverage","Rejected By","Reason"];

    public static $PAID_HEADER = array("No.", "Name", "Unit", "Amount", "Approved By", "Receipt Ref.", "Payment Coverage", "Payment Date");

    public function __construct(UserModel $user, $fromMonth, $toMonth)
    {

        $pdf = new TCPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        // Do not print the header line
        $pdf->SetPrintHeader(false);

        // Add a page
        $pdf->AddPage();

        // Set font for title and headings
        $pdf->SetFont('helvetica', 'B', 24);
        $pdf->SetTextColor(0, 51, 102); // Dark blue color
        $pdf->Image('./resources/logo.jpeg', 10, 10, 30);
        $pdf->Cell(0, 20, 'Carissa Homes Subdivision Phase 7', 0, 1, 'C');

        // Set font for report details
        $pdf->SetFont('helvetica', 'B', 14);
        $pdf->SetTextColor(0); // Reset text color to black

        // Display coverage date
        $dateCoverage = 'Coverage Period: ' . Time::toStringMonthYear($fromMonth) . " - " . Time::toStringMonthYear($toMonth);

        $pdf->Cell(0, 10, $dateCoverage, 0, 1, 'C');

        // Display report generation date
        $generationDate = 'Report Generated On: ' . date('F j, Y, g:i a'); // Current date and time
        $pdf->Cell(0, 10, $generationDate, 0, 1, 'C');

        // Display administrator information
        $generatedBy = 'Generated by: ' . $user->getName();
        $pdf->Cell(0, 10, $generatedBy, 0, 1, 'C');

        $pdf->Ln(10); // Add some vertical space

        $this->pdf = $pdf;
    }

    static function unpaid(UserModel $user, $data): array
    {

        $content = [];

        foreach ($data['items'] as $item) {
            $content[] = [
                $user->getName(),
                "B" . $user->getBlock() . " L" . $user->getLot(),
                $item['due'],
                $item['month'],
            ];
        }

        return $content;

    }

    static function pending(UserModel $user, $data): array
    {

        $content = [];

        foreach ($data as $item) {
            $content[] = [
                $user->getName(),
                "B" . $user->getBlock() . " L" . $user->getLot(),
                $item->getAmount(),
                $item->getFromMonth() . " - " . $item->getToMonth(),
            ];
        }

        return $content;

    }

    static function paid(UserModel $User, array $results): array
    {

        $content = [];

        foreach ($results as $result) {

            $receipts = $result->getReceipts();

            $references = "";

            $fromMonthCoverage = Time::toStringMonthYear($result->getFromMonth());
            $toMonthCoverage = Time::toStringMonthYear($result->getToMonth());

            $paymentCoverage = $fromMonthCoverage . " - " . $toMonthCoverage;

            foreach ($receipts as $receipt) {
                $references = $references . $receipt->getReferenceNumber() . "\n";
            }

            $content[] = [
                $result->getId(),
                $result->getUser()->getName(),
                "B" . $result->getUser()->getBlock() . " L" . $result->getUser()->getLot(),
                $result->getAmount(),
                $result->getLogs()[0]->getUpdatedBy()->getName(),
                $references,
                $paymentCoverage,
                Time::convertDateTimeToDateString($result->getCreatedAt())

            ];
        }

        return $content;
    }

    static function rejected(UserModel $User, array $results): array
    {

        $content = [];

        foreach ($results as $result) {

            $receipts = $result->getReceipts();

            $references = "";

            $fromMonthCoverage = Time::toStringMonthYear($result->getFromMonth());
            $toMonthCoverage = Time::toStringMonthYear($result->getToMonth());

            $paymentCoverage = $fromMonthCoverage . " - " . $toMonthCoverage;

            foreach ($receipts as $receipt) {
                $references = $references . $receipt->getReferenceNumber() . "\n";
            }

            $content[] = [
                $result->getId(),
                $result->getUser()->getName(),
                "B" . $result->getUser()->getBlock() . " L" . $result->getUser()->getLot(),
                $paymentCoverage,
                $result->getLogs()[0]->getUpdatedBy()->getName(),
                $result->getLogs()[0]->getMessage(),
            ];
        }

        return $content;
    }

    public function addBody(array $report_data, array $width, $content_title)
    {

        $pdf = $this->pdf;

        foreach ($report_data as $section_title => $section_content) {

            $pdf->SetFont('helvetica', 'B', 16);
            $pdf->SetFillColor(230, 230, 230);
            $pdf->Cell(0, 10, $section_title, 1, 1, 'L', 1, '', true);

            if ($section_title === $content_title) {

                $pdf->SetFont('helvetica', '', 12);
                $colWidths = $width;

                for ($i = 0; $i < count($section_content[0]); $i++) {
                    $pdf->Cell($colWidths[$i], 10, $section_content[0][$i], 1, 0, 'C', 1);
                }

                $pdf->Ln();

                // Add data rows
                for ($rowIdx = 1; $rowIdx < count($section_content); $rowIdx++) {
                    for ($colIdx = 0; $colIdx < count($section_content[$rowIdx]); $colIdx++) {
                        $pdf->Cell($colWidths[$colIdx], 10, $section_content[$rowIdx][$colIdx], 1, 0, 'C');
                    }
                    $pdf->Ln(); // Move to the next row
                }

            } else {
                foreach ($section_content as $line) {
                    $pdf->SetFont('helvetica', '', 12);
                    $pdf->MultiCell(0, 10, $line, 0, 'L');
                }
            }

            $pdf->Ln(10);
        }
    }

    public function getPdf(): TCPDF
    {
        return $this->pdf;
    }

    public function output()
    {
        return $this->pdf->Output('', 'S');
    }
}